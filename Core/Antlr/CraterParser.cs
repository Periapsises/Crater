//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/yannk/Desktop/Crater/Core/CraterParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Core.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CraterParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNCTION=1, LOCAL=2, RETURN=3, END=4, NOT=5, AND=6, OR=7, IF=8, ELSEIF=9, 
		ELSE=10, THEN=11, WHILE=12, FOR=13, DO=14, IN=15, REPEAT=16, UNTIL=17, 
		CLASS=18, STATIC=19, NEW=20, VOID=21, FUNC=22, NUMBER=23, HEXADECIMAL=24, 
		EXPONENTIAL=25, BINARY=26, STRING=27, BOOLEAN=28, IDENTIFIER=29, ASSIGN=30, 
		LESS=31, LESS_EQUAL=32, GREATER=33, GREATER_EQUAL=34, EQUAL=35, NOT_EQUAL=36, 
		PLUS=37, MINUS=38, MUL=39, DIV=40, MOD=41, EXP=42, QMARK=43, CONCAT=44, 
		LPAREN=45, RPAREN=46, LBRACKET=47, RBRACKET=48, LSQRBRACKET=49, RSQRBRACKET=50, 
		COLON=51, COMMA=52, DOT=53, COMMENT=54, WHITESPACE=55;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_functionDeclaration = 4, RULE_functionParameters = 5, RULE_functionParameter = 6, 
		RULE_functionReturnTypes = 7, RULE_ifStatement = 8, RULE_elseIfStatement = 9, 
		RULE_elseStatement = 10, RULE_functionCallStatement = 11, RULE_functionArguments = 12, 
		RULE_dataType = 13, RULE_expression = 14, RULE_primaryExpression = 15, 
		RULE_prefixExpression = 16, RULE_postfixExpression = 17, RULE_literal = 18;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "variableDeclaration", "functionDeclaration", 
		"functionParameters", "functionParameter", "functionReturnTypes", "ifStatement", 
		"elseIfStatement", "elseStatement", "functionCallStatement", "functionArguments", 
		"dataType", "expression", "primaryExpression", "prefixExpression", "postfixExpression", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'function'", "'local'", "'return'", "'end'", "'not'", "'and'", 
		"'or'", "'if'", "'elseif'", "'else'", "'then'", "'while'", "'for'", "'do'", 
		"'in'", "'repeat'", "'until'", "'class'", "'static'", "'new'", "'void'", 
		"'func'", null, null, null, null, null, null, null, "'='", "'<'", "'<='", 
		"'>'", "'>='", "'=='", "'~='", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
		"'?'", "'..'", "'('", "')'", "'{'", "'}'", "'['", "']'", "':'", "','", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCTION", "LOCAL", "RETURN", "END", "NOT", "AND", "OR", "IF", 
		"ELSEIF", "ELSE", "THEN", "WHILE", "FOR", "DO", "IN", "REPEAT", "UNTIL", 
		"CLASS", "STATIC", "NEW", "VOID", "FUNC", "NUMBER", "HEXADECIMAL", "EXPONENTIAL", 
		"BINARY", "STRING", "BOOLEAN", "IDENTIFIER", "ASSIGN", "LESS", "LESS_EQUAL", 
		"GREATER", "GREATER_EQUAL", "EQUAL", "NOT_EQUAL", "PLUS", "MINUS", "MUL", 
		"DIV", "MOD", "EXP", "QMARK", "CONCAT", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "LSQRBRACKET", "RSQRBRACKET", "COLON", "COMMA", "DOT", "COMMENT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CraterParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CraterParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CraterParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CraterParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CraterParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			block();
			State = 39;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184908960006L) != 0)) {
				{
				{
				State = 41;
				statement();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				functionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 50;
				functionCallStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken name;
		public DataTypeContext type;
		public ExpressionContext initializer;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CraterParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CraterParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(CraterParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CraterParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 53;
				Match(LOCAL);
				}
			}

			State = 56;
			_localctx.name = Match(IDENTIFIER);
			State = 57;
			Match(COLON);
			State = 58;
			_localctx.type = dataType();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 59;
				Match(ASSIGN);
				State = 60;
				_localctx.initializer = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public IToken name;
		public FunctionReturnTypesContext returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(CraterParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CraterParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CraterParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CraterParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CraterParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CraterParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnTypesContext functionReturnTypes() {
			return GetRuleContext<FunctionReturnTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(CraterParser.LOCAL, 0); }
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 63;
				Match(LOCAL);
				}
			}

			State = 66;
			Match(FUNCTION);
			State = 67;
			_localctx.name = Match(IDENTIFIER);
			State = 68;
			Match(LPAREN);
			State = 69;
			functionParameters();
			State = 70;
			Match(RPAREN);
			State = 71;
			Match(COLON);
			State = 72;
			_localctx.returnType = functionReturnTypes();
			State = 73;
			block();
			State = 74;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CraterParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CraterParser.COMMA, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			functionParameter();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 77;
				Match(COMMA);
				State = 78;
				functionParameter();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public IToken name;
		public DataTypeContext type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CraterParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CraterParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_localctx.name = Match(IDENTIFIER);
			State = 85;
			Match(COLON);
			State = 86;
			_localctx.type = dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(CraterParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CraterParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CraterParser.COMMA, i);
		}
		public FunctionReturnTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturnTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionReturnTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionReturnTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturnTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnTypesContext functionReturnTypes() {
		FunctionReturnTypesContext _localctx = new FunctionReturnTypesContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionReturnTypes);
		try {
			int _alt;
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				Match(VOID);
				}
				break;
			case FUNCTION:
			case FUNC:
			case NUMBER:
			case HEXADECIMAL:
			case EXPONENTIAL:
			case BINARY:
			case STRING:
			case BOOLEAN:
			case IDENTIFIER:
			case MINUS:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				dataType();
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 90;
						Match(COMMA);
						State = 91;
						dataType();
						}
						} 
					}
					State = 96;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CraterParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(CraterParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(CraterParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(IF);
			State = 100;
			_localctx.condition = expression(0);
			State = 101;
			Match(THEN);
			State = 102;
			block();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 103;
				elseIfStatement();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 109;
				elseStatement();
				}
			}

			State = 112;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(CraterParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(CraterParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(ELSEIF);
			State = 115;
			_localctx.condition = expression(0);
			State = 116;
			Match(THEN);
			State = 117;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CraterParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(ELSE);
			State = 120;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CraterParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CraterParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			primaryExpression();
			State = 123;
			Match(LPAREN);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35460315348992L) != 0)) {
				{
				State = 124;
				functionArguments();
				}
			}

			State = 127;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CraterParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CraterParser.COMMA, i);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			expression(0);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 130;
				Match(COMMA);
				State = 131;
				expression(0);
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	 
		public DataTypeContext() { }
		public virtual void CopyFrom(DataTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionLiteralContext : DataTypeContext {
		public IToken nullable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(CraterParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(CraterParser.QMARK, 0); }
		public FunctionLiteralContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncLiteralContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(CraterParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CraterParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CraterParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CraterParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnTypesContext functionReturnTypes() {
			return GetRuleContext<FunctionReturnTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CraterParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CraterParser.COMMA, i);
		}
		public FuncLiteralContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFuncLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFuncLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullableFuncLiteralContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(CraterParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(CraterParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(CraterParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(CraterParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(CraterParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CraterParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnTypesContext functionReturnTypes() {
			return GetRuleContext<FunctionReturnTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(CraterParser.QMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CraterParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CraterParser.COMMA, i);
		}
		public NullableFuncLiteralContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterNullableFuncLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitNullableFuncLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableFuncLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTypeContext : DataTypeContext {
		public IToken nullable;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMARK() { return GetToken(CraterParser.QMARK, 0); }
		public ExpressionTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterExpressionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitExpressionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_dataType);
		int _la;
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new FunctionLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				Match(FUNCTION);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMARK) {
					{
					State = 138;
					((FunctionLiteralContext)_localctx).nullable = Match(QMARK);
					}
				}

				}
				break;
			case 2:
				_localctx = new FuncLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				Match(FUNC);
				State = 142;
				Match(LPAREN);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35460319543298L) != 0)) {
					{
					State = 143;
					dataType();
					State = 148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 144;
						Match(COMMA);
						State = 145;
						dataType();
						}
						}
						State = 150;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 153;
				Match(RPAREN);
				State = 154;
				Match(COLON);
				State = 155;
				functionReturnTypes();
				}
				break;
			case 3:
				_localctx = new NullableFuncLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 156;
				Match(LPAREN);
				State = 157;
				Match(FUNC);
				State = 158;
				Match(LPAREN);
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35460319543298L) != 0)) {
					{
					State = 159;
					dataType();
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 160;
						Match(COMMA);
						State = 161;
						dataType();
						}
						}
						State = 166;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 169;
				Match(RPAREN);
				State = 170;
				Match(COLON);
				State = 171;
				functionReturnTypes();
				State = 172;
				Match(RPAREN);
				State = 173;
				Match(QMARK);
				}
				break;
			case 4:
				_localctx = new ExpressionTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 175;
				expression(0);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMARK) {
					{
					State = 176;
					((ExpressionTypeContext)_localctx).nullable = Match(QMARK);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalOperationContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(CraterParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(CraterParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(CraterParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(CraterParser.GREATER_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(CraterParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CraterParser.EQUAL, 0); }
		public LogicalOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrOperationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CraterParser.OR, 0); }
		public OrOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitOrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaseExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public BaseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenationOperationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(CraterParser.CONCAT, 0); }
		public ConcatenationOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterConcatenationOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitConcatenationOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenationOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOperationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CraterParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentOperationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(CraterParser.EXP, 0); }
		public ExponentOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterExponentOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitExponentOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeOperationContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CraterParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CraterParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CraterParser.MOD, 0); }
		public MultiplicativeOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOperationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CraterParser.AND, 0); }
		public AndOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitAndOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveOperationContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(CraterParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(CraterParser.MINUS, 0); }
		public AdditiveOperationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterAdditiveOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitAdditiveOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case LPAREN:
				{
				_localctx = new BaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 182;
				primaryExpression();
				}
				break;
			case MINUS:
				{
				_localctx = new UnaryOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183;
				Match(MINUS);
				State = 184;
				expression(9);
				}
				break;
			case NUMBER:
			case HEXADECIMAL:
			case EXPONENTIAL:
			case BINARY:
			case STRING:
			case BOOLEAN:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185;
				literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 209;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new ExponentOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 188;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 189;
						Match(EXP);
						State = 190;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 191;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 192;
						((MultiplicativeOperationContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3848290697216L) != 0)) ) {
							((MultiplicativeOperationContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 193;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 194;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 195;
						((AdditiveOperationContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditiveOperationContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 196;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ConcatenationOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 197;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 198;
						Match(CONCAT);
						State = 199;
						expression(6);
						}
						break;
					case 5:
						{
						_localctx = new LogicalOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 200;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 201;
						((LogicalOperationContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 135291469824L) != 0)) ) {
							((LogicalOperationContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 202;
						expression(5);
						}
						break;
					case 6:
						{
						_localctx = new AndOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 203;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 204;
						Match(AND);
						State = 205;
						expression(4);
						}
						break;
					case 7:
						{
						_localctx = new OrOperationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 207;
						Match(OR);
						State = 208;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExpressionContext prefixExpression() {
			return GetRuleContext<PrefixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext[] postfixExpression() {
			return GetRuleContexts<PostfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression(int i) {
			return GetRuleContext<PostfixExpressionContext>(i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_primaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			prefixExpression();
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 215;
					postfixExpression();
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixExpressionContext : ParserRuleContext {
		public PrefixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpression; } }
	 
		public PrefixExpressionContext() { }
		public virtual void CopyFrom(PrefixExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : PrefixExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CraterParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CraterParser.RPAREN, 0); }
		public ParenthesizedExpressionContext(PrefixExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableReferenceContext : PrefixExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CraterParser.IDENTIFIER, 0); }
		public VariableReferenceContext(PrefixExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterVariableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitVariableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixExpressionContext prefixExpression() {
		PrefixExpressionContext _localctx = new PrefixExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_prefixExpression);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new ParenthesizedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				Match(LPAREN);
				State = 222;
				expression(0);
				State = 223;
				Match(RPAREN);
				}
				break;
			case IDENTIFIER:
				_localctx = new VariableReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 225;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
	 
		public PostfixExpressionContext() { }
		public virtual void CopyFrom(PostfixExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DotIndexingContext : PostfixExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(CraterParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CraterParser.IDENTIFIER, 0); }
		public DotIndexingContext(PostfixExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterDotIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitDotIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketIndexingContext : PostfixExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQRBRACKET() { return GetToken(CraterParser.LSQRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQRBRACKET() { return GetToken(CraterParser.RSQRBRACKET, 0); }
		public BracketIndexingContext(PostfixExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterBracketIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitBracketIndexing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketIndexing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : PostfixExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CraterParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CraterParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public FunctionCallContext(PostfixExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_postfixExpression);
		int _la;
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				_localctx = new DotIndexingContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 228;
				Match(DOT);
				State = 229;
				Match(IDENTIFIER);
				}
				break;
			case LSQRBRACKET:
				_localctx = new BracketIndexingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				Match(LSQRBRACKET);
				State = 231;
				expression(0);
				State = 232;
				Match(RSQRBRACKET);
				}
				break;
			case LPAREN:
				_localctx = new FunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 234;
				Match(LPAREN);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35460315348992L) != 0)) {
					{
					State = 235;
					functionArguments();
					}
				}

				State = 238;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IToken number;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CraterParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL() { return GetToken(CraterParser.HEXADECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPONENTIAL() { return GetToken(CraterParser.EXPONENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(CraterParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CraterParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(CraterParser.BOOLEAN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICraterParserListener typedListener = listener as ICraterParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICraterParserVisitor<TResult> typedVisitor = visitor as ICraterParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 36, RULE_literal);
		int _la;
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case HEXADECIMAL:
			case EXPONENTIAL:
			case BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				_localctx.number = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 125829120L) != 0)) ) {
					_localctx.number = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243;
				Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,247,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,1,5,1,43,8,1,10,
		1,12,1,46,9,1,1,2,1,2,1,2,1,2,3,2,52,8,2,1,3,3,3,55,8,3,1,3,1,3,1,3,1,
		3,1,3,3,3,62,8,3,1,4,3,4,65,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,5,1,5,1,5,5,5,80,8,5,10,5,12,5,83,9,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,5,7,93,8,7,10,7,12,7,96,9,7,3,7,98,8,7,1,8,1,8,1,8,1,8,1,8,5,8,105,
		8,8,10,8,12,8,108,9,8,1,8,3,8,111,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,
		1,10,1,10,1,11,1,11,1,11,3,11,126,8,11,1,11,1,11,1,12,1,12,1,12,5,12,133,
		8,12,10,12,12,12,136,9,12,1,13,1,13,3,13,140,8,13,1,13,1,13,1,13,1,13,
		1,13,5,13,147,8,13,10,13,12,13,150,9,13,3,13,152,8,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,5,13,163,8,13,10,13,12,13,166,9,13,3,13,168,
		8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,178,8,13,3,13,180,8,
		13,1,14,1,14,1,14,1,14,1,14,3,14,187,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,5,14,210,8,14,10,14,12,14,213,9,14,1,15,1,15,5,15,217,8,15,10,15,
		12,15,220,9,15,1,16,1,16,1,16,1,16,1,16,3,16,227,8,16,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,3,17,237,8,17,1,17,3,17,240,8,17,1,18,1,18,1,18,
		3,18,245,8,18,1,18,0,1,28,19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,0,4,1,0,39,41,1,0,37,38,1,0,31,36,1,0,23,26,266,0,38,1,0,0,0,
		2,44,1,0,0,0,4,51,1,0,0,0,6,54,1,0,0,0,8,64,1,0,0,0,10,76,1,0,0,0,12,84,
		1,0,0,0,14,97,1,0,0,0,16,99,1,0,0,0,18,114,1,0,0,0,20,119,1,0,0,0,22,122,
		1,0,0,0,24,129,1,0,0,0,26,179,1,0,0,0,28,186,1,0,0,0,30,214,1,0,0,0,32,
		226,1,0,0,0,34,239,1,0,0,0,36,244,1,0,0,0,38,39,3,2,1,0,39,40,5,0,0,1,
		40,1,1,0,0,0,41,43,3,4,2,0,42,41,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,
		45,1,0,0,0,45,3,1,0,0,0,46,44,1,0,0,0,47,52,3,6,3,0,48,52,3,8,4,0,49,52,
		3,16,8,0,50,52,3,22,11,0,51,47,1,0,0,0,51,48,1,0,0,0,51,49,1,0,0,0,51,
		50,1,0,0,0,52,5,1,0,0,0,53,55,5,2,0,0,54,53,1,0,0,0,54,55,1,0,0,0,55,56,
		1,0,0,0,56,57,5,29,0,0,57,58,5,51,0,0,58,61,3,26,13,0,59,60,5,30,0,0,60,
		62,3,28,14,0,61,59,1,0,0,0,61,62,1,0,0,0,62,7,1,0,0,0,63,65,5,2,0,0,64,
		63,1,0,0,0,64,65,1,0,0,0,65,66,1,0,0,0,66,67,5,1,0,0,67,68,5,29,0,0,68,
		69,5,45,0,0,69,70,3,10,5,0,70,71,5,46,0,0,71,72,5,51,0,0,72,73,3,14,7,
		0,73,74,3,2,1,0,74,75,5,4,0,0,75,9,1,0,0,0,76,81,3,12,6,0,77,78,5,52,0,
		0,78,80,3,12,6,0,79,77,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,
		0,82,11,1,0,0,0,83,81,1,0,0,0,84,85,5,29,0,0,85,86,5,51,0,0,86,87,3,26,
		13,0,87,13,1,0,0,0,88,98,5,21,0,0,89,94,3,26,13,0,90,91,5,52,0,0,91,93,
		3,26,13,0,92,90,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,98,
		1,0,0,0,96,94,1,0,0,0,97,88,1,0,0,0,97,89,1,0,0,0,98,15,1,0,0,0,99,100,
		5,8,0,0,100,101,3,28,14,0,101,102,5,11,0,0,102,106,3,2,1,0,103,105,3,18,
		9,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,
		110,1,0,0,0,108,106,1,0,0,0,109,111,3,20,10,0,110,109,1,0,0,0,110,111,
		1,0,0,0,111,112,1,0,0,0,112,113,5,4,0,0,113,17,1,0,0,0,114,115,5,9,0,0,
		115,116,3,28,14,0,116,117,5,11,0,0,117,118,3,2,1,0,118,19,1,0,0,0,119,
		120,5,10,0,0,120,121,3,2,1,0,121,21,1,0,0,0,122,123,3,30,15,0,123,125,
		5,45,0,0,124,126,3,24,12,0,125,124,1,0,0,0,125,126,1,0,0,0,126,127,1,0,
		0,0,127,128,5,46,0,0,128,23,1,0,0,0,129,134,3,28,14,0,130,131,5,52,0,0,
		131,133,3,28,14,0,132,130,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,
		135,1,0,0,0,135,25,1,0,0,0,136,134,1,0,0,0,137,139,5,1,0,0,138,140,5,43,
		0,0,139,138,1,0,0,0,139,140,1,0,0,0,140,180,1,0,0,0,141,142,5,22,0,0,142,
		151,5,45,0,0,143,148,3,26,13,0,144,145,5,52,0,0,145,147,3,26,13,0,146,
		144,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,152,1,
		0,0,0,150,148,1,0,0,0,151,143,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,
		153,154,5,46,0,0,154,155,5,51,0,0,155,180,3,14,7,0,156,157,5,45,0,0,157,
		158,5,22,0,0,158,167,5,45,0,0,159,164,3,26,13,0,160,161,5,52,0,0,161,163,
		3,26,13,0,162,160,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,
		0,0,165,168,1,0,0,0,166,164,1,0,0,0,167,159,1,0,0,0,167,168,1,0,0,0,168,
		169,1,0,0,0,169,170,5,46,0,0,170,171,5,51,0,0,171,172,3,14,7,0,172,173,
		5,46,0,0,173,174,5,43,0,0,174,180,1,0,0,0,175,177,3,28,14,0,176,178,5,
		43,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,137,1,0,0,0,
		179,141,1,0,0,0,179,156,1,0,0,0,179,175,1,0,0,0,180,27,1,0,0,0,181,182,
		6,14,-1,0,182,187,3,30,15,0,183,184,5,38,0,0,184,187,3,28,14,9,185,187,
		3,36,18,0,186,181,1,0,0,0,186,183,1,0,0,0,186,185,1,0,0,0,187,211,1,0,
		0,0,188,189,10,8,0,0,189,190,5,42,0,0,190,210,3,28,14,9,191,192,10,7,0,
		0,192,193,7,0,0,0,193,210,3,28,14,8,194,195,10,6,0,0,195,196,7,1,0,0,196,
		210,3,28,14,7,197,198,10,5,0,0,198,199,5,44,0,0,199,210,3,28,14,6,200,
		201,10,4,0,0,201,202,7,2,0,0,202,210,3,28,14,5,203,204,10,3,0,0,204,205,
		5,6,0,0,205,210,3,28,14,4,206,207,10,2,0,0,207,208,5,7,0,0,208,210,3,28,
		14,3,209,188,1,0,0,0,209,191,1,0,0,0,209,194,1,0,0,0,209,197,1,0,0,0,209,
		200,1,0,0,0,209,203,1,0,0,0,209,206,1,0,0,0,210,213,1,0,0,0,211,209,1,
		0,0,0,211,212,1,0,0,0,212,29,1,0,0,0,213,211,1,0,0,0,214,218,3,32,16,0,
		215,217,3,34,17,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,
		219,1,0,0,0,219,31,1,0,0,0,220,218,1,0,0,0,221,222,5,45,0,0,222,223,3,
		28,14,0,223,224,5,46,0,0,224,227,1,0,0,0,225,227,5,29,0,0,226,221,1,0,
		0,0,226,225,1,0,0,0,227,33,1,0,0,0,228,229,5,53,0,0,229,240,5,29,0,0,230,
		231,5,49,0,0,231,232,3,28,14,0,232,233,5,50,0,0,233,240,1,0,0,0,234,236,
		5,45,0,0,235,237,3,24,12,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,
		0,0,238,240,5,46,0,0,239,228,1,0,0,0,239,230,1,0,0,0,239,234,1,0,0,0,240,
		35,1,0,0,0,241,245,7,3,0,0,242,245,5,27,0,0,243,245,5,28,0,0,244,241,1,
		0,0,0,244,242,1,0,0,0,244,243,1,0,0,0,245,37,1,0,0,0,27,44,51,54,61,64,
		81,94,97,106,110,125,134,139,148,151,164,167,177,179,186,209,211,218,226,
		236,239,244
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Core.Antlr
